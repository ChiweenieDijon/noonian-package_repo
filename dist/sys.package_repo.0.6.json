{
"metadata":{
	"_id": "PsDs1JsTQRmW7en47GkEBA",
	"description": "Enable instance to share its packages for installation on other instances.",
	"key": "sys.package_repo",
	"major_version": 0,
	"manifest": {
		"BusinessObjectDef": {
			"cS_PrRdvR2Wym70FLAb1sw": "sys-pkg:3"
		},
		"Config": {
			"ogwd1W5pRcu-JbBP52FmOg": "sys-pkg:5"
		},
		"DataTrigger": {
			"joY-NbCdRY-X-e0EYnO7wA": "sys-pkg:1"
		},
		"LabelGroup": {
			"b0SCjfyXS8u2PM-ForYZVQ": "sys-pkg:3"
		},
		"Role": {
			"M0DMVhdTSYumKFzO9TrV2w": "sys-pkg:1"
		},
		"User": {
			"94XUJElFQeaDxsVj0ELPsA": "sys-pkg:1"
		},
		"WebService": {
			"3po-tKzeQquoawOMxD_REQ": "sys-pkg:4",
			"6w85fWPxRlGVuiBrR9_6jQ": "sys-pkg:4",
			"KNLe4RXWRCmpFW7QlTZghw": "deleted",
			"yoXU9E9gR1KhnTv3P9sHzw": "sys-pkg:1"
		}
	},
	"minor_version": 6,
	"name": "Package Repository"
},
"business_objects":[
{
	"__disp": "HostedPackage",
	"__ver": "sys-pkg:3",
	"_class": "BusinessObjectDef",
	"_id": "cS_PrRdvR2Wym70FLAb1sw",
	"abstract": false,
	"class_name": "HostedPackage",
	"definition": {
		"available_versions": [
			{
				"type": "string"
			}
		],
		"git_config": {
			"type": "object"
		},
		"package_files": [
			{
				"type": "attachment"
			}
		],
		"package_key": {
			"type": "string"
		}
	},
	"doc": "\n @property {string[]} available_versions \n @property {object} git_config \n @property {attachment[]} package_files \n @property {string} package_key \n",
	"system": true
},
{
	"__ver": "sys-pkg:5",
	"_class": "Config",
	"_id": "ogwd1W5pRcu-JbBP52FmOg",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.HostedPackage",
	"rolespec": [
	],
	"system": false,
	"value": {
		"edit": {
			"layout": [
				"package_key",
				[
					"package_files",
					"available_versions"
				],
				"git_config"
			]
		},
		"list": {
			"fields": [
				"package_key",
				"available_versions",
				"package_files"
			]
		},
		"view": {
			"layout": [
				"package_key",
				[
					"package_files",
					"available_versions"
				],
				"git_config"
			]
		}
	}
},
{
	"__ver": "sys-pkg:1",
	"_class": "DataTrigger",
	"_id": "joY-NbCdRY-X-e0EYnO7wA",
	"action": "function (db) {\n    if(this.minor_version && this.package_file) {\n        var currentVersion = (this.major_version || 0)+'.'+this.minor_version;\n        var attachment = this.package_file;\n        db.HostedPackage.findOne({'business_object_package._id':this._id}).then(function(hp) {\n            if(!hp) {\n                return;\n            }\n            \n            for(var i=0; i < hp.available_versions.length; i++) {\n                if(hp.available_versions[i] == currentVersion) {\n                    return;\n                }\n            }\n            hp.package_files.push(attachment);\n            hp.available_versions.push(currentVersion);\n            hp.save();\n        });\n    }\n}",
	"before_after": "after",
	"business_object": {
		"_disp": "BusinessObjectPackage",
		"_id": "QLN_PHr_Tj6nzgzrHA4XdQ"
	},
	"key": "sys.package_repo.onPackageUpdate",
	"on_update": true
},
{
	"__ver": "sys-pkg:3",
	"_class": "LabelGroup",
	"_id": "b0SCjfyXS8u2PM-ForYZVQ",
	"key": "sys.dbui.bo.HostedPackage",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"value": {
		"available_versions": "Available Versions",
		"git_config": "Git Config",
		"package_files": "Package Files",
		"package_key": "Package Key"
	}
},
{
	"__ver": "sys-pkg:1",
	"_class": "Role",
	"_id": "M0DMVhdTSYumKFzO9TrV2w",
	"name": "REPO_DOWNLOADER"
},
{
	"__ver": "sys-pkg:1",
	"_class": "User",
	"_id": "94XUJElFQeaDxsVj0ELPsA",
	"name": "RepoAccess",
	"password": {
		"hash": "$2a$10$uuGwXcLlQLQwpK.ke.1LQu9/3HcmdE/e9ObKFg3E3N19IGZ2H3RuC"
	},
	"roles": [
		{
			"_disp": "REPO_DOWNLOADER",
			"_id": "M0DMVhdTSYumKFzO9TrV2w"
		}
	]
},
{
	"__ver": "sys-pkg:4",
	"_class": "WebService",
	"_id": "3po-tKzeQquoawOMxD_REQ",
	"function": "function (db, queryParams, res) {\n    var GridFsService = db._svc.GridFsService;\n    \n    var key=queryParams.key;\n    var version=queryParams.version;\n    \n    if(!key || !version) {\n        throw 'missing required parameters';\n    }\n    \n    return db.HostedPackage.findOne({\"package_key\":key})\n    .then(\n        function(hp){\n            var pkgIndex=0;\n            var versions = hp.available_versions;\n            \n            for(pkgIndex=0; pkgIndex < versions.length; pkgIndex++) {\n                if(versions[pkgIndex] == version) break;\n            }\n            if(pkgIndex >= versions.length) {\n                throw 'version '+version+' not found';\n            }\n            \n            var fileId = hp.package_files[pkgIndex].attachment_id;\n            \n            return GridFsService.getFile(fileId);\n        }\n    )\n    .then(\n        function(f) {\n            // console.log(f);\n            return {\n                __stream_response:f.readstream\n            }\n        }\n    );\n    \n}",
	"path": "/package_repo/getPackage",
	"rolespec": [
		"M0DMVhdTSYumKFzO9TrV2w"
	]
},
{
	"__ver": "sys-pkg:4",
	"_class": "WebService",
	"_id": "6w85fWPxRlGVuiBrR9_6jQ",
	"function": "function (db, _) {\n    return db.HostedPackage.find({}).then(function(hpList){\n        var result = [];\n        _.forEach(hpList, function(hp) {\n            var versions = hp.available_versions;\n            result.push({\n               key:hp.package_key,\n               latest_version:versions[versions.length-1],\n               available_versions: versions\n            });\n        });\n        return result;\n    });\n}",
	"path": "/package_repo/getList",
	"rolespec": [
		"M0DMVhdTSYumKFzO9TrV2w"
	]
},
{
	"__disp": "/webhooks/githubTarget",
	"__ver": "sys-pkg:1",
	"_class": "WebService",
	"_id": "yoXU9E9gR1KhnTv3P9sHzw",
	"doc": "Target for github webhook",
	"function": "function (db, postBody, httpRequestLib, Q, _) {\n    const GridFsService = db._svc.GridFsService;\n    const repoName = postBody && postBody.repository && postBody.repository.name;\n    \n    if(!repoName) {\n        console.error('githubTarget called with bad post: %j', postBody);\n        return 'invalid post body';\n    }\n    \n    \n    return db.HostedPackage.findOne({'git_config.repository_name':repoName}).then(function(hp) {\n        if(!hp) {\n            console.error('githubTarget called with bad repo name: %s \\n %j', repoName, postBody);\n            return 'Repository '+repoName+' not configured properly';\n        }\n        \n        console.log('Hosted Package: %j', hp);\n        var cfg = hp.git_config;\n        \n        var interestedBranch = 'refs/heads/'+cfg.trigger_branch;\n        \n        if(interestedBranch !== postBody.ref) {\n            return `Not interested in branch ${postBody.ref}`;\n        }\n        \n        //We're interested! Check pkg version...\n        var deferred = Q.defer();\n        \n        var url= postBody.repository.contents_url;\n        \n        if(!url) {\n            return \"Bad contents_url\";\n        }\n        url = url.replace('{+path}', cfg.dist_path);\n        \n        var header = {\n            Authorization:'token '+cfg.api_access_token,\n            'User-Agent':'Noonian-integration-'+cfg.api_user_agent\n        };\n        \n        httpRequestLib.get({\n            uri:url,\n            headers:header,\n            json:true\n        },\n        function(err,httpResponse, body) {\n            console.log(err, body);\n            if(err || !body || !body.length) {\n                var msg = err || 'Missing body';\n                console.error(msg);\n                return deferred.reject(msg);\n            }\n            \n            \n            const myVersions = hp.available_versions || [];\n            const toPull = [];\n            const regex = new RegExp(hp.package_key+'.([\\\\d\\\\.]+).json')\n            for(var file of body) {\n                let match = regex.exec(file.name);\n                let ver = match && match[1];\n                if(ver && myVersions.indexOf(ver) < 0) {\n                    toPull.push({\n                        ver,\n                        url:file.download_url,\n                        metaObj:{\n                            filename:hp.package_key+'.'+ver+'.json',\n                            size:file.size,\n                            type:'application/json'\n                        }\n                    });\n                }\n            }\n            \n            var dlPromises = [];\n            _.forEach(toPull, function(pullFile) {\n                var {ver, url, metaObj} = pullFile;\n            \n                console.log('Pulling '+url);\n                var respStream = httpRequestLib.get({uri:url,headers:header});\n                \n                dlPromises.push(\n                    GridFsService.saveFile(respStream, metaObj).then(function(fileId) {\n                        console.log('SAVED FILE');\n                        //file has been saved to gridfs\n                        metaObj.attachment_id = fileId;\n                        hp.available_versions = hp.available_versions || [];\n                        hp.available_versions.push(ver);\n                        \n                        hp.package_files = hp.package_files || [];\n                        hp.package_files.push(metaObj);\n                        hp.markModified('available_versions');\n                        hp.markModified('package_files');\n                    })\n                );\n            });\n            \n            Q.all(dlPromises).then(function() {\n                console.log('SAVING HP');\n                deferred.resolve(toPull);\n                return hp.save();\n            },\n            function(err) {\n                console.error(err);\n            });\n            \n            \n        });\n        \n        \n        return deferred.promise;\n        \n    });\n}",
	"path": "/webhooks/githubTarget",
	"rolespec": [
	]
}]}
